package com.lwo.weather.data.weather

import com.google.gson.annotations.SerializedName

data class WeatherCloud(
    @SerializedName("last_updated") val lastUpdated: String,
    @SerializedName("last_updated_epoch") val lastUpdatedEpoch: Int,
    @SerializedName("temp_c") val tempC: Float,
    @SerializedName("temp_f") val tempF: Float,
    @SerializedName("feelslike_c") val feelslikeC: Float,
    @SerializedName("feelslike_f") val feelslikeF: Float,
    @SerializedName("condition:text") val conditionText: String,
    @SerializedName("condition:icon") val conditionIcon: String,
    @SerializedName("condition:code") val conditionCode: Int,
    @SerializedName("wind_mph") val windMph: Float,
    @SerializedName("wind_kph") val windKph: Float,
    @SerializedName("wind_degree") val windDegree: Int,
    @SerializedName("wind_dir") val windDir: String,
    @SerializedName("pressure_mb") val pressureMb: Float,
    @SerializedName("pressure_in") val pressureIn: Float,
    @SerializedName("precip_mm") val precipMm: Float,
    @SerializedName("precip_in") val precipIn: Float,
    @SerializedName("humidity") val humidity: Int,
    @SerializedName("cloud") val cloud: Int,
    @SerializedName("is_day") val isDay: Int,
    @SerializedName("uv") val uv: Float,
    @SerializedName("gust_mph") val gustMph: Float,
    @SerializedName("gust_kph") val gustKph: Float,
)

fun WeatherCloud.mapToData() = WeatherData(
    lastUpdated = lastUpdated,
    lastUpdatedEpoch = lastUpdatedEpoch,
    tempC = tempC,
    tempF = tempF,
    feelslikeC = feelslikeC,
    feelslikeF = feelslikeF,
    conditionText = conditionText,
    conditionIcon = conditionIcon,
    conditionCode = conditionCode,
    windMph = windMph,
    windKph = windKph,
    windDegree = windDegree,
    windDir = windDir,
    pressureMb = pressureMb,
    pressureIn = pressureIn,
    precipMm = precipMm,
    precipIn = precipIn,
    humidity = humidity,
    cloud = cloud,
    isDay = isDay,
    uv = uv,
    gustMph = gustMph,
    gustKph = gustKph
)